{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","todosRef","ref","child","useStyles","makeStyles","root","height","width","backgroundColor","display","alignItems","justifyContent","title","fontSize","fontWeight","paddingBottom","color","fontFamily","wrapper","paddingTop","flexDirection","borderRadius","boxShadow","inputWrapper","textfield","buttonWrapper","button","icon","todoWrapper","marginTop","marginBottom","item","padding","border","actionWrapper","checkbox","deleteWrapper","delete","deleteIcon","App","useState","Date","date","setDate","todos","setTodos","input","setInput","classes","moment","valueOf","start","setStart","end","setEnd","useEffect","startOf","endOf","retrieveTodos","on","snapshot","val","Object","values","i","length","id","keys","console","log","Box","className","Typography","utils","DateFnsUtils","margin","label","format","value","onChange","KeyboardButtonProps","map","idx","status","isComplete","key","style","textDecorationLine","Checkbox","checked","update","then","handleComplete","classeName","IconButton","onClick","remove","TextField","e","target","push","set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a527526.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nconst config = {\r\n    apiKey: \"AIzaSyChgx6nxQyIyCNzlV2RwRXDWggObciog00\",\r\n    authDomain: \"the-ultimate-todo-list.firebaseapp.com\",\r\n    databaseURL: \"https://the-ultimate-todo-list.firebaseio.com\",\r\n    projectId: \"the-ultimate-todo-list\",\r\n    storageBucket: \"the-ultimate-todo-list.appspot.com\",\r\n    messagingSenderId: \"387158845370\",\r\n    appId: \"1:387158845370:web:78a3c18e97ec00eaf6df83\",\r\n    measurementId: \"G-VR9K8DXBTQ\"\r\n};\r\nfirebase.initializeApp(config);\r\nconst databaseRef = firebase.database().ref();\r\nexport const todosRef = databaseRef.child(\"todos\")","import React, { useState, useEffect } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport moment from 'moment'\nimport { todosRef } from './firebase'\nimport { Box, Typography, makeStyles, TextField, IconButton, Checkbox } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\nimport * as firebase from 'firebase';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100vh',\n    width: '100vw',\n    backgroundColor: '#f6f6f6',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 400,\n    paddingBottom: 10,\n    color: '#2d2d2d',\n    fontFamily: 'Quicksand'\n  },\n  wrapper: {\n    backgroundColor: 'white',\n    width: '40%',\n    paddingTop: 50,\n    paddingBottom: 50,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    borderRadius: 10,\n    boxShadow: '2px 2px 5px 0px rgba(0,0,0,0.1)'\n  },\n  inputWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '60%'\n  },\n  textfield: {\n    width: '90%'\n  },\n  buttonWrapper: {\n    width: '10%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: '100%',\n    backgroundColor: '#e91e63',\n    borderRadius: 5,\n  },\n  icon: {\n    color: 'white',\n  },\n  todoWrapper: {\n    width: '80%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    marginTop: 20,\n    marginBottom: 20\n  },\n  item: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '70%',\n    backgroundColor: 'white',\n    padding: 12,\n    border: '1px solid #e2e2e2',\n    marginBottom: 10,\n    borderRadius: 5,\n  },\n  actionWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  checkbox: {\n  },\n  deleteWrapper: {\n    width: '45%',\n  },\n  delete: {\n    width: 50,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 5,\n    color: '#37474f'\n  },\n  deleteIcon: {\n    color: '#37474f'\n  },\n});\n\n\nconst App = () => {\n  const [date, setDate] = useState(new Date())\n  const [todos, setTodos] = useState([])\n  const [input, setInput] = useState('')\n  const classes = useStyles()\n  const [start, setStart] = useState(moment().valueOf())\n  const [end, setEnd] = useState(moment().valueOf())\n\n  useEffect(() => {\n    setStart(moment(date).startOf('day').valueOf())\n    setEnd(moment(date).endOf('day').valueOf())\n  }, [date])\n\n  useEffect(() => {\n    retrieveTodos()\n  }, [])\n\n  const retrieveTodos = () => {\n    todosRef.on(\"value\", snapshot => {\n      if (snapshot.val() != null) {\n        let todos = Object.values(snapshot.val())\n        for (let i = 0; i < todos.length; i++) {\n          todos[i].id = Object.keys(snapshot.val())[i]\n        }\n        console.log(todos)\n        setTodos(todos)\n      }\n    });\n  }\n\n  const createTodo = () => {\n    todosRef.push().set({\n      title: input,\n      date: moment(date).valueOf(),\n      isComplete: false\n    }).then(() => {\n      setInput('')\n    });\n  }\n\n  const handleComplete = (id, idx) => {\n    console.log(todos)\n    todosRef.child(id).update({\n      isComplete: !(todos[idx].isComplete),\n      title: todos[idx].title,\n      date: todos[idx].date\n    }).then(() => {\n      console.log('success')\n    })\n  }\n\n  const removeItem = (id) => {\n    let removeRef = firebase.database().ref('todos/' + id)\n    removeRef.remove()\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.wrapper}>\n        <Typography className={classes.title}>DARRYL'S TODOS</Typography>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Select Date\"\n            format=\"MM/dd/yyyy\"\n            value={date}\n            onChange={(date) => setDate(date)}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </MuiPickersUtilsProvider>\n        <Box className={classes.todoWrapper}>\n          {\n            todos.map((item, idx) => {\n              if (item.date < end && item.date > start) {\n                let status = item.isComplete\n                return (\n                  <Box key={item.id} className={classes.item} style={{ backgroundColor: status ? '#f6f6f6' : '#fff' }}>\n                    <Typography style={{ color: status ? 'gray' : 'black', textDecorationLine: status ? 'line-through' : 'none' }}>\n                      {item.title}\n                    </Typography>\n                    <Box className={classes.actionWrapper}>\n                      <Box className={classes.deleteWrapper}>\n                        <Checkbox\n                          className={classes.checkbox}\n                          checked={item.isComplete}\n                          onChange={() => handleComplete(item.id, idx)}\n                        />\n                      </Box>\n                      <Box classeName={classes.deleteWrapper}>\n                        <IconButton onClick={() => removeItem(item.id)} className={classes.delete}>\n                          <DeleteOutlineOutlinedIcon className={classes.deleteIcon} />\n                        </IconButton>\n                      </Box>\n                    </Box>\n                  </Box>\n                )\n              }\n            })\n          }\n        </Box>\n        <Box className={classes.inputWrapper}>\n          <TextField value={input} onChange={(e) => setInput(e.target.value)} className={classes.textfield} label=\"Todo Title\" />\n          <Box className={classes.buttonWrapper}>\n            <IconButton onClick={createTodo} className={classes.button}>\n              <AddIcon className={classes.icon} />\n            </IconButton>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}